# -*- coding: utf-8 -*-
"""001_Read_GPS_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xyJbEfHpIJeZoy62Kd0a-y61Szjpy086
"""

# Mount The Google Drive
from google.colab import drive
drive.mount('/content/gdrive')

# Import Libraries
import os
import numpy as np
import pandas as pd
import time
import datetime
import pickle
pd.options.mode.chained_assignment = None
print("Libraries are imported")

# Define Path of GPS Data

path = "/content/gdrive/MyDrive/GPS/"
os.chdir(path)

# Read GPS Data
df_list = os.listdir()
df = []
for i in df_list:
    with open(f'{i}', 'rb') as f:
        df.append(f.readlines())

# Visualize the gps data

import pandas as pd
import matplotlib.pyplot as plt

# Définir le chemin du fichier .plt
file_path = "/content/gdrive/MyDrive/Data/Geolife/GPS/combined112.plt"

# Lire le fichier .plt ligne par ligne
with open(file_path, 'r') as file:
    lines = file.readlines()[6:]  # Ignorer les 6 premières lignes

# Initialiser une liste pour stocker les données valides
valid_lines = []

# Filtrer les lignes mal formées
for line in lines:
    parts = line.strip().split(',')
    if len(parts) == 7:  # S'assurer que chaque ligne a exactement 7 champs
        valid_lines.append(parts)

# Convertir la liste des lignes valides en DataFrame
data = pd.DataFrame(valid_lines, columns=['Latitude', 'Longitude', 'Unused1', 'Altitude', 'Unused2', 'Date', 'Time'])

# Convertir les colonnes nécessaires en type float
data['Latitude'] = data['Latitude'].astype(float)
data['Longitude'] = data['Longitude'].astype(float)

# Extraire les colonnes latitude et longitude
latitudes = data['Latitude']
longitudes = data['Longitude']

# Tracer les données GPS
plt.figure(figsize=(10, 10))
plt.plot(longitudes, latitudes, marker='o', markersize=2, linestyle='-', color='blue')
plt.title('Trajet GPS')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(True)
plt.show()

# Keep only the digits
temp = []
for i in range(len(df_list)):
    txt = df_list[i]
    User = ''.join((ch if ch in '0123456789' else '') for ch in txt)
    temp.append(User)

# Define User list
User_list = []
for i in temp:
    User_list.append(int(i))

# Read Latitude, Longitude, Altitude, Date, Time, User
Lat = []
Lon = []
Alt = []
Date = []
Time = []
User = []

for i in range(len(df)):
    del df[i][0:6]
    del df[i][-1]
    for j in range(len(df[i])):
        line = str(df[i][j]).split(",")
        if len(line) == 7:
            Lat.append(line[0][2:])
            Lon.append(line[1])
            Alt.append(line[4])
            Date.append(line[5])
            Time.append(line[6][0:8])
            User.append(User_list[i])

# Create a data frame
Data = {'Latitude':Lat, 'Longitude':Lon, 'Altitude':Alt, 'Date':Date, 'Time':Time, 'User':User}
DF = pd.DataFrame(Data)

# Create a timestamp column
DF['TS1'] = DF['Date'] + " " + DF['Time']

# Change Date and Time to Timestamp
ST = []
for i in DF['TS1']:
    element = datetime.datetime.strptime(i,"%Y-%m-%d %H:%M:%S")
    ST.append(datetime.datetime.timestamp(element))

DF['TS'] = ST
DF.drop('TS1', inplace = True, axis = 1)

# Define Trip
DF['Trip'] = np.nan
DF['Trip'].iloc[0] = 1

# If User Changes it is a New Trip
# If Time Difference between 2 GPS rows higher than 600 Seconds it is a New Trip
Limit = 600
counter = 2
for i in range(len(DF)-1):
  Time_Dif = DF['TS'].iloc[i+1] - DF['TS'].iloc[i]
  if DF['User'].iloc[i] != DF['User'].iloc[i+1] or Time_Dif > Limit:
    DF['Trip'].iloc[i+1] = counter
    counter += 1

# Total Number of Trips
All_Trips = counter - 1
All_Trips

DF.fillna(method='ffill', inplace = True)

DF

# Define Path for Pickle Data
path = "/content/gdrive/MyDrive/Colab Notebooks/"
os.chdir(path)

# Save All GPS Trips in a DataFrame
with open("001_All_GeoLife_GPS.pickle", 'wb') as f:
    pickle.dump(DF, f)

import datetime

# Example value of TS
ts_value = 1.311943e+09

# Convert to a datetime object
dt_object = datetime.datetime.fromtimestamp(ts_value)
print("Datetime:", dt_object)